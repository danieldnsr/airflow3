# values-minimal.yaml
# --------------------------------------------------
# Airflow Helm chart minimal config para Minikube + WSL2
# Airflow 3 + Postgres persistente (Official PostgreSQL image)
# --------------------------------------------------

# ========================
# Disable Bitnami PostgreSQL, use official image
# ========================
postgresql:
  enabled: false

# ========================
# External PostgreSQL (using official image)
# ========================
data:
  metadataConnection:
    user: airflow
    pass: airflowpassword
    protocol: postgresql
    host: postgres
    port: 5432
    db: airflow
    sslmode: disable

# ========================
# Redis
# ========================
redis:
  enabled: true
  persistence:
    enabled: false

# ========================
# Airflow Configuration
# ========================
executor: "CeleryExecutor"

images:
  airflow:
    repository: apache/airflow
    tag: "3.0.2"
    pullPolicy: IfNotPresent

# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
fernetKey: "n7uEZy1JQaHQZmtgty1jOg2Ywr3FZi2MyfMUjjD-C40="

# Webserver
webserver:
  replicas: 1
  service:
    type: NodePort
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Scheduler
scheduler:
  replicas: 1
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Workers
workers:
  replicas: 1
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Triggerer
triggerer:
  replicas: 1
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# DAGs configuration - OpciÃ³n 1: Desarrollo local con init container
dags:
  gitSync:
    enabled: false
  persistence:
    enabled: true
    size: 1Gi
    accessMode: ReadWriteOnce

# ConfiguraciÃ³n para desarrollo: copiar DAGs desde init container
extraInitContainers:
  - name: git-sync-init
    image: alpine/git:latest
    command:
      - /bin/sh
      - -c
      - |
        echo "Copiando DAGs desde repositorio local..."
        mkdir -p /git/dags
        # En producciÃ³n aquÃ­ irÃ­as un git clone
        # Por ahora creamos los DAGs bÃ¡sicos
        cat > /git/dags/hello_world_simple.py << 'EOF'
        from datetime import datetime
        from airflow import DAG
        from airflow.operators.bash import BashOperator

        dag = DAG(
            'hello_world_simple',
            description='Hello World DAG simple',  
            schedule_interval=None,
            start_date=datetime(2025, 10, 14),
            catchup=False,
            tags=['hello-world']
        )

        hello_task = BashOperator(
            task_id='say_hello',
            bash_command='echo "Â¡Hola Mundo desde Airflow en Kubernetes! ðŸš€"',
            dag=dag
        )
        EOF
        
        echo "DAGs creados en /git/dags"
        ls -la /git/dags/
    volumeMounts:
      - name: dags-data
        mountPath: /git

# Logs
logs:
  persistence:
    enabled: false